buildscript {
    ext {
        contractsDir = file("mappings")
        stubsOutputDirRoot = file("${project.buildDir}/production/${project.name}-stubs/")
    }
    dependencies {
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:$verifierVersion"
    }
}

plugins {
    id "io.spring.dependency-management"
    id 'org.springframework.boot' version "${springVersion}"
    id "maven-publish"
    id 'org.jetbrains.kotlin.jvm'
    id 'kotlin-spring'
}

apply plugin: 'spring-cloud-contract'
apply from: '../kotlin-spring.gradle'

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(15))
}

version = "0.1.1"

publishing {
    publications {
        stubs(MavenPublication) {
            groupId "org.beancounter"
            artifactId "${project.name}"
            artifact verifierStubsJar
        }
    }
}

dependencyManagement {
    imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}" }
}

dependencies {
    implementation(
            project(":jar-common"),
            project(":jar-auth"),
            project(":jar-client"),
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.boot:spring-boot-starter-logging",
            "org.springframework.cloud:spring-cloud-starter-openfeign",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.security:spring-security-oauth2-resource-server",
            "org.springframework.security:spring-security-oauth2-jose",
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-integration",
            "org.jetbrains.kotlin:kotlin-reflect",
            "io.github.resilience4j:resilience4j-spring-cloud2:$resilience4jVersion",
            "io.github.resilience4j:resilience4j-circuitbreaker:$resilience4jVersion",
            "io.github.resilience4j:resilience4j-annotations:$resilience4jVersion",
            "io.github.resilience4j:resilience4j-ratelimiter:$resilience4jVersion",
            "io.github.resilience4j:resilience4j-timelimiter:$resilience4jVersion",
            "com.github.ben-manes.caffeine:caffeine",
            "com.h2database:h2", // Dev
            'org.postgresql:postgresql:42.3.2',
            "org.springframework.kafka:spring-kafka",
            'com.opencsv:opencsv:5.5.2',
    )

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin") { exclude module: 'kotlin-reflect' }

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"
    contractTestImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-stream', classifier: 'test-binder')
    contractTestImplementation(
            'org.springframework.cloud:spring-cloud-starter-contract-verifier',
            'javax.inject:javax.inject:1',
    )
    testImplementation(
            "org.junit.jupiter:junit-jupiter",
            "org.assertj:assertj-core",
            "org.mockito.kotlin:mockito-kotlin:4.0.0",
            "org.springframework.boot:spring-boot-starter-test",
            "org.springframework.security:spring-security-test",
            "org.springframework.cloud:spring-cloud-contract-wiremock",
            "org.springframework.kafka:spring-kafka-test",
            project(":jar-auth").sourceSets.test.output,
    )
}

contracts {
    testFramework = "JUNIT5"
    failOnInProgress = false
    packageWithBaseClasses = "com.contracts.data"
    baseClassForTests = "com.contracts.data.ContractVerifierBase"
}

contractTest {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}


task pubStubs {
    dependsOn build
    dependsOn publishToMavenLocal
}

jacoco {
    toolVersion = "$jacocoVersion"
}