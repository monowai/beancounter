plugins {
    alias(libs.plugins.jvm)
    alias(libs.plugins.jacoco)
    alias(libs.plugins.idea)
    alias(libs.plugins.kotlinter)
    alias(libs.plugins.kotlin.jpa)
    alias(libs.plugins.kotlin.spring)
    id "com.osacky.doctor" version "0.10.0"
}

// Build configuration

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

// Shared configuration for all subprojects
subprojects {
    apply plugin: libs.plugins.jvm.get().pluginId
    apply plugin: libs.plugins.jacoco.get().pluginId
    apply plugin: libs.plugins.idea.get().pluginId
    apply plugin: libs.plugins.kotlinter.get().pluginId
    apply plugin: libs.plugins.kotlin.jpa.get().pluginId
    apply plugin: libs.plugins.kotlin.spring.get().pluginId

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }

    // JVM configuration
    kotlin {
        jvmToolchain(21)
    }



    // Test configuration with optimizations
    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        finalizedBy(tasks.named('jacocoTestReport'))

        // Test optimizations
        maxParallelForks = 1
        forkEvery = 100
        timeout = Duration.ofMinutes(5)

        // Test logging
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = 'full'
            showStandardStreams = false
        }
    }

    // Java compilation configuration
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs.addAll('-Xlint:unchecked', '-parameters')
        options.deprecation = true
        options.encoding = 'UTF-8'
    }

    // Kotlin compilation configuration
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = '21'
            freeCompilerArgs += [
                '-Xjsr305=strict',
                '-Xjvm-default=all'
            ]
        }
    }

    // Build task dependencies
    tasks.named('build') {
        dependsOn(tasks.named('formatKotlin'))
    }

    // JaCoCo configuration
    jacoco {
        toolVersion = "0.8.12"
    }

    jacocoTestReport {
        reports {
            xml.required.set(true)
            html.required.set(true)
        }
    }

    // IDEA configuration
    idea {
        module {
            inheritOutputDirs = true
            downloadSources = true
        }
    }

    // Check task dependencies
    check.dependsOn(tasks.named('jacocoTestReport'))

    // Common dependencies for all modules
    dependencies {
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        // Common test dependencies
        testImplementation platform(libs.spring.boot.dependencies)
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation libs.assertj
    }
}

// Root project configuration
group = 'com.beancounter'
version = '0.0.1-SNAPSHOT'

// Root project tasks with proper dependency order
tasks.register('buildAll') {
    dependsOn ':jar-common:build'
    dependsOn ':jar-auth:build'
    dependsOn ':jar-client:build'
    dependsOn ':jar-shell:build'
    dependsOn ':svc-data:build'
    dependsOn ':svc-position:build'
    dependsOn ':svc-event:build'
    description = 'Build all subprojects in dependency order'
}

// Build core libraries first (no service dependencies)
tasks.register('buildCoreLibraries') {
    dependsOn ':jar-common:build'
    dependsOn ':jar-auth:build'
    dependsOn ':jar-client:build'
    dependsOn ':jar-shell:build'
    description = 'Build core libraries (no service dependencies)'
}

// Build services after core libraries
tasks.register('buildServices') {
    dependsOn 'buildCoreLibraries'
    dependsOn ':svc-data:build'
    dependsOn ':svc-position:build'
    dependsOn ':svc-event:build'
    description = 'Build services after core libraries'
}

// Publish contract stubs for services that need them
tasks.register('publishStubs') {
    dependsOn ':svc-data:pubStubs'
    dependsOn ':svc-position:pubStubs'
    description = 'Publish contract stubs to local Maven repository'
}

tasks.register('testAll') {
    dependsOn 'verifyStubs'   // Verify stubs are available
    dependsOn ':jar-common:test'
    dependsOn ':jar-auth:test'
    dependsOn ':jar-client:test'
    dependsOn ':jar-shell:test'
    dependsOn ':svc-data:test'
    dependsOn ':svc-position:test'
    dependsOn ':svc-event:test'
    description = 'Test all subprojects in dependency order (stubs must be available)'
}

tasks.register('cleanAll') {
    dependsOn subprojects.collect { it.tasks.named('clean') }
    description = 'Clean all subprojects'
}

// Dependency verification
tasks.register('verifyDependencies') {
    dependsOn subprojects.collect { it.tasks.named('dependencies') }
    description = 'Verify all project dependencies'
}

// Build core libraries first (no service dependencies)
tasks.register('buildCore') {
    dependsOn ':jar-common:build'
    dependsOn ':jar-auth:build'
    dependsOn ':jar-client:build'
    description = 'Build core libraries (jar-common, jar-auth, jar-client)'
}

// Verify stubs are available before building
tasks.register('verifyStubsForBuild') {
    doLast {
        def mavenLocal = new File(System.getProperty('user.home') + '/.m2/repository/org/beancounter')
        def svcDataStubs = new File(mavenLocal, 'svc-data/0.1.1/svc-data-0.1.1-stubs.jar')
        def svcPositionStubs = new File(mavenLocal, 'svc-position/0.1.1/svc-position-0.1.1-stubs.jar')
        
        if (!svcDataStubs.exists() || !svcPositionStubs.exists()) {
            println "ðŸ“¦ Contract stubs missing!"
            println "   Run: ./gradlew buildWithStubs"
            println "   This will build everything and publish stubs."
            throw new GradleException("Contract stubs are missing. Run './gradlew buildWithStubs' for a complete build.")
        } else {
            println "âœ… Contract stubs available, proceeding with build..."
        }
    }
    description = 'Verify that contract stubs are available before building'
}

// Smart build that checks for stubs first
tasks.register('buildSmart') {
    dependsOn 'verifyStubsForBuild'
    dependsOn 'buildAll'
    description = 'Smart build - checks for stubs and builds if available'
}

// Build services first and publish stubs
tasks.register('buildServicesAndPublishStubs') {
    dependsOn ':jar-common:build'
    dependsOn ':jar-auth:build'
    dependsOn ':svc-data:build'
    dependsOn ':svc-position:build'
    dependsOn ':svc-event:build'
    dependsOn 'publishStubs'
    description = 'Build services and publish stubs'
}

// Complete build with stub publishing (for CI/CD or explicit stub publishing)
tasks.register('buildWithStubs') {
    doLast {
        println "ðŸ”¨ Complete build with stub publishing completed successfully!"
    }
    description = 'Complete build including contract stub publishing'
}

// Build everything in the correct order
tasks.register('buildAllWithStubs') {
    dependsOn 'buildServicesAndPublishStubs'
    dependsOn ':jar-client:build'
    dependsOn ':jar-shell:build'
    finalizedBy 'buildWithStubs'
    description = 'Build all projects in correct order with stub publishing'
}

// Verify stubs are available before testing
tasks.register('verifyStubsForTest') {
    doLast {
        def mavenLocal = new File(System.getProperty('user.home') + '/.m2/repository/org/beancounter')
        def svcDataStubs = new File(mavenLocal, 'svc-data/0.1.1/svc-data-0.1.1-stubs.jar')
        def svcPositionStubs = new File(mavenLocal, 'svc-position/0.1.1/svc-position-0.1.1-stubs.jar')
        
        if (!svcDataStubs.exists() || !svcPositionStubs.exists()) {
            println "ðŸ“¦ Contract stubs missing!"
            println "   Run: ./gradlew testWithStubs"
            println "   This will publish stubs and run all tests."
            throw new GradleException("Contract stubs are missing. Run './gradlew testWithStubs' for a complete test run.")
        } else {
            println "âœ… Contract stubs available, proceeding with tests..."
        }
    }
    description = 'Verify that contract stubs are available before testing'
}

// Smart test that checks for stubs first
tasks.register('testSmart') {
    dependsOn 'verifyStubsForTest'
    dependsOn 'testAll'
    description = 'Smart test - checks for stubs and tests if available'
}

// Complete test with stub publishing (for CI/CD or explicit stub publishing)
tasks.register('testWithStubs') {
    dependsOn 'publishStubs'
    dependsOn 'testAll'
    description = 'Complete test run including contract stub publishing'
}

// Verify stub availability
tasks.register('verifyStubs') {
    doLast {
        println "Verifying contract stubs are available..."
        
        def mavenLocal = new File(System.getProperty('user.home') + '/.m2/repository/org/beancounter')
        def svcDataStubs = new File(mavenLocal, 'svc-data/0.1.1/svc-data-0.1.1-stubs.jar')
        def svcPositionStubs = new File(mavenLocal, 'svc-position/0.1.1/svc-position-0.1.1-stubs.jar')
        
        if (!svcDataStubs.exists()) {
            throw new GradleException("svc-data stubs not found. Run 'publishStubs' first.")
        }
        if (!svcPositionStubs.exists()) {
            throw new GradleException("svc-position stubs not found. Run 'publishStubs' first.")
        }
        
        println "âœ… Contract stubs are available:"
        println "  - svc-data: ${svcDataStubs.absolutePath}"
        println "  - svc-position: ${svcPositionStubs.absolutePath}"
    }
    description = 'Verify that contract stubs are available in local Maven repository'
}

// Validate dependency order
tasks.register('validateDependencies') {
    doLast {
        println "Validating project dependencies..."

        // Check jar-auth depends on jar-common
        def jarAuthDeps = project(':jar-auth').configurations.implementation.dependencies
        if (!jarAuthDeps.any { it.name == 'jar-common' }) {
            throw new GradleException("jar-auth must depend on jar-common")
        }

        // Check jar-client depends on jar-common and jar-auth
        def jarClientDeps = project(':jar-client').configurations.implementation.dependencies
        if (!jarClientDeps.any { it.name == 'jar-common' }) {
            throw new GradleException("jar-client must depend on jar-common")
        }
        if (!jarClientDeps.any { it.name == 'jar-auth' }) {
            throw new GradleException("jar-client must depend on jar-auth")
        }

        // Check services depend on core libraries
        ['svc-data', 'svc-position', 'svc-event'].each { serviceName ->
            def serviceDeps = project(":${serviceName}").configurations.implementation.dependencies
            if (!serviceDeps.any { it.name == 'jar-common' }) {
                throw new GradleException("${serviceName} must depend on jar-common")
            }
            if (!serviceDeps.any { it.name == 'jar-auth' }) {
                throw new GradleException("${serviceName} must depend on jar-auth")
            }
            if (!serviceDeps.any { it.name == 'jar-client' }) {
                throw new GradleException("${serviceName} must depend on jar-client")
            }
        }

        println "âœ… All dependencies are correctly configured!"
    }
    description = 'Validate that all projects have correct dependencies'
}