plugins {
    alias(libs.plugins.jvm)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.contract)
    alias(libs.plugins.kotlin.spring)
    alias(libs.plugins.java.test.fixtures)
    alias(libs.plugins.sentry)
    alias(libs.plugins.git.properties)
    alias(libs.plugins.download)
    id 'maven-publish'
}

version = "0.1.1"

publishing {
    publications {
        create("data-stubs", MavenPublication) {
            artifactId = project.name
            groupId = "org.beancounter"
            version = project.version
            artifact verifierStubsJar
        }
    }
}

dependencies {
    implementation(
            platform(libs.spring.boot.dependencies),
            platform(libs.spring.cloud.dependencies),
            platform(libs.otel.bom),
            project(":jar-common"),
            project(":jar-auth"),
            project(":jar-client"),
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.boot:spring-boot-starter-logging",
            "org.springframework.cloud:spring-cloud-starter-openfeign",
            libs.sentry.openfeign,
            "io.sentry:sentry-jdbc",
            "org.springframework.boot:spring-boot-starter-aop",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.security:spring-security-oauth2-resource-server",
            "org.springframework.security:spring-security-oauth2-jose",
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-integration",
            "org.jetbrains.kotlinx:kotlinx-coroutines-reactor",
            "org.jetbrains.kotlinx:kotlinx-coroutines-core",
            libs.resilience4j,
            libs.resilience4j.annotations,
            "com.github.ben-manes.caffeine:caffeine",
            "com.h2database:h2", // Dev
            libs.postgresql,
            "org.springframework.kafka:spring-kafka",
            "com.opencsv:opencsv:5.11.1"
    )
    compileOnly("org.springframework.boot:spring-boot-configuration-processor")
    contractTestImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier")
    testImplementation(
            "org.assertj:assertj-core",
            "com.fasterxml.jackson.core:jackson-databind",
            "org.springframework.boot:spring-boot-starter-test",
            "org.springframework.security:spring-security-test",
            "org.springframework.cloud:spring-cloud-contract-wiremock",
            "org.springframework.kafka:spring-kafka-test",
            "org.junit.jupiter:junit-jupiter",
            "org.junit.platform:junit-platform-suite-api",
            "org.junit.platform:junit-platform-suite-engine",
            libs.mockito.kotlin,
            testFixtures(project(":jar-auth"))
    )
}

contracts {
    testMode = 'EXPLICIT'
    failOnInProgress = false
    testFramework = "JUNIT5"
    failOnNoContracts = false
    packageWithBaseClasses = "com.contracts.data"
    baseClassForTests = "com.contracts.data.ContractVerifierBase"
}

contractTest {
    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.register('testSuites', Test) {
    include '**/suites/**'
    useJUnitPlatform()
}

test {
    exclude '**/suites/**'
}

tasks.register('pubStubs') {
    dependsOn build
    dependsOn publishToMavenLocal
}

tasks.lintKotlinContractTest {
    dependsOn generateContractTests
}

tasks.formatKotlinContractTest {
    dependsOn generateContractTests
}

tasks.withType(JavaCompile).configureEach {
    options.fork = false
}

springBoot {
    buildInfo()
}

gitProperties {
    failOnNoGitDirectory = false
}

bootBuildImage {
    imageName = "monowai/bc-data"
}

def isCI = System.getenv('CI')?.toBoolean() ?: false

sentry {
    if (isCI) {
        includeSourceContext = true
        org = "monowai-developments-ltd"
        projectName = "position"
        authToken = System.getenv("SENTRY_AUTH_TOKEN")
    }
}

tasks.named('sentryCollectSourcesJava') {
    dependsOn tasks.named('generateContractTests')
    mustRunAfter tasks.named('generateContractTests')
}