import de.undercouch.gradle.tasks.download.Download

plugins {
    alias(libs.plugins.jvm)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.contract)
    alias(libs.plugins.kotlin.spring)
    alias(libs.plugins.java.test.fixtures)
    alias(libs.plugins.sentry)
    alias(libs.plugins.git.properties)
    alias(libs.plugins.download)
    id 'maven-publish'
}

version = '0.1.1'
publishing {
    publications {
        // https://youtrack.jetbrains.com/issue/IDEA-162281
        stubs(MavenPublication) {
            groupId "org.beancounter"
            artifactId "${project.name}"
            artifact verifierStubsJar
        }
    }
}
dependencyManagement {
    imports {
        mavenBom("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.6.0")
    }
}

dependencies {
    implementation(platform(libs.spring.boot.dependencies),
            platform(libs.spring.cloud.dependencies),
            project(":jar-common"),
            project(":jar-client"),
            project(":jar-auth"),
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-logging",
            libs.sentry.openfeign,
            "org.springframework.boot:spring-boot-starter-aop",
            "org.springframework.cloud:spring-cloud-starter-openfeign",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.security:spring-security-oauth2-resource-server",
            "org.springframework.security:spring-security-oauth2-jose",
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-integration",
            "org.jetbrains.kotlinx:kotlinx-coroutines-core",
            "com.fasterxml.jackson.module:jackson-module-kotlin",
            "org.jetbrains.kotlin:kotlin-reflect",
            libs.resilience4j.annotations,
            libs.resilience4j,
            "org.springframework.kafka:spring-kafka",
            "org.apache.commons:commons-math3:3.6.1")

    compileOnly("org.springframework.boot:spring-boot-configuration-processor")
    contractTestImplementation('org.springframework.cloud:spring-cloud-starter-contract-verifier',)
    testImplementation("org.assertj:assertj-core",
            "com.fasterxml.jackson.core:jackson-databind",
            "org.springframework.boot:spring-boot-starter-test",
            "org.springframework.security:spring-security-test",
            "org.springframework.cloud:spring-cloud-contract-wiremock",
            "org.springframework.cloud:spring-cloud-contract-stub-runner",
            "org.springframework.kafka:spring-kafka-test",
            "org.junit.jupiter:junit-jupiter",
            libs.mockito.kotlin,
            testFixtures(project(":jar-auth")),)
    testImplementation("org.beancounter:svc-data:0.1.1:stubs") {
        transitive = false
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
}

contracts {
    testFramework = "JUNIT5"
    testMode = 'EXPLICIT'
    baseClassForTests = "com.contracts.position.ContractVerifierBase"
}

tasks.register('pubStubs') {
    dependsOn build
    dependsOn publishToMavenLocal
}

springBoot {
    buildInfo()
}

gitProperties {
    failOnNoGitDirectory = false
}

tasks.lintKotlinContractTest {
    dependsOn generateContractTests
}

tasks.formatKotlinContractTest {
    dependsOn generateContractTests
}

bootBuildImage {
    imageName = "monowai/bc-position"
}

//def isCI = System.getenv('CI')?.toBoolean() ?: false

//sentry {
//    // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
//    // This enables source context, allowing you to see your source
//    // code as part of your stack traces in Sentry.
//    if (isCI) {
//        includeSourceContext = true
//
//        org = "monowai-developments-ltd"
//        projectName = "position"
//        authToken = System.getenv("SENTRY_AUTH_TOKEN")
//    } else {
//        //enabled = false
//    }
//}

tasks.register('downloadSentryAgent', Download) {
    src "https://repo1.maven.org/maven2/io/sentry/sentry-opentelemetry-agent/${sentry}/sentry-opentelemetry-agent-${sentry}.jar"
    dest layout.buildDirectory.file("downloads/sentry-opentelemetry-agent-${sentry}.jar").get().asFile
    onlyIfNewer true
}

tasks.register('copySentryAgent', Copy) {
    from layout.buildDirectory.file("downloads/sentry-opentelemetry-agent-${sentry}.jar")
    into 'lib'
    dependsOn downloadSentryAgent
}
