plugins {
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.java.test.fixtures)
    alias(libs.plugins.sentry)
    alias(libs.plugins.git.properties)
    alias(libs.plugins.download)
    id 'maven-publish'
}

version = "0.1.1"

dependencies {
    implementation(
            platform(libs.spring.boot.dependencies),
            platform(libs.spring.cloud.dependencies),
            project(":jar-common"),
            project(":jar-auth"),
            project(":jar-client"),
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.boot:spring-boot-starter-logging",
            libs.spring.cloud.feign,
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.security:spring-security-oauth2-resource-server",
            "org.springframework.security:spring-security-oauth2-jose",
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-integration",
            libs.sentry.openfeign,
            libs.spring.doc,
            libs.spring.doc.mvc,
            "org.jetbrains.kotlinx:kotlinx-coroutines-core",
            "org.jetbrains.kotlinx:kotlinx-coroutines-reactor",
            "com.fasterxml.jackson.module:jackson-module-kotlin",
            libs.resilience4j,
            libs.resilience4j.annotations,
            "com.github.ben-manes.caffeine:caffeine",
            "com.h2database:h2",
            libs.postgresql,
            "org.springframework.kafka:spring-kafka"
    )
    compileOnly("org.springframework.boot:spring-boot-configuration-processor")
    testImplementation(
            "com.h2database:h2",
            "com.fasterxml.jackson.module:jackson-module-kotlin",
            "org.springframework.cloud:spring-cloud-contract-stub-runner",
            "org.springframework.security:spring-security-test",
            "io.sentry:sentry-jdbc",
            "org.springframework.cloud:spring-cloud-contract-wiremock",
            "org.springframework.kafka:spring-kafka-test",
            libs.mockito.kotlin,
            libs.kotest.runner.junit5,
            libs.kotest.assertions.core,
            libs.kotest.framework.engine,
            testFixtures(project(":jar-auth"))
    )
    testImplementation("org.beancounter:svc-position:0.1.1:stubs") {
        transitive = false
    }
}

springBoot {
    buildInfo()
}

gitProperties {
    failOnNoGitDirectory = false
}

bootBuildImage {
    imageName = "monowai/bc-event"
}

def isCI = System.getenv('CI')?.toBoolean() ?: false

sentry {
    if (isCI) {
        includeSourceContext = true
        org = "monowai-developments-ltd"
        projectName = "event"
        authToken = System.getenv("SENTRY_AUTH_TOKEN")
    }
}
