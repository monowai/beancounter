version: 2.1
orbs:
  codecov: codecov/codecov@3.2.5

executors:
  java-build:
    environment:
      _JAVA_OPTIONS: "-Xms512m -Xmx2g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
      STACK_VER: << pipeline.number >>
    docker:
      - image: cimg/openjdk:21.0

jobs:
  # Complete build job that handles everything in the correct order
  build-and-test:
    executor: java-build
    resource_class: large
    environment:
      IMAGE_NAME: bc-build
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7e:93:fb:39:b3:21:f7:b6:48:bd:f7:0e:56:5c:ad:87"
      - checkout
      - restore_cache:
          keys:
            - v3-build-cache-{{ checksum "build.gradle" }}-{{ checksum "gradle/libs.versions.toml" }}-{{ checksum "settings.gradle" }}
            - v2-build-cache-{{ checksum "build.gradle" }}
            - v1-build-cache
      
      # Use manual build order to handle circular dependencies
      - run:
          name: Build All Projects and Publish Stubs
          command: |
            echo "ðŸ”¨ Building all projects and publishing stubs..."
            echo "ðŸ“¦ Step 1: Building core libraries..."
            ./gradlew :jar-common:build :jar-auth:build --no-daemon --parallel --max-workers=4
            echo "ðŸ“¦ Step 2: Building services and publishing stubs..."
            ./gradlew :svc-data:build --no-daemon --parallel --max-workers=4
            ./gradlew :svc-data:pubStubs --no-daemon
            ./gradlew :svc-position:build --no-daemon --parallel --max-workers=4
            ./gradlew :svc-position:pubStubs --no-daemon
            ./gradlew :svc-event:build --no-daemon --parallel --max-workers=4
            echo "ðŸ“¦ Step 3: Building client libraries..."
            ./gradlew :jar-client:build :jar-shell:build --no-daemon --parallel --max-workers=4
            
      # Upload coverage for all projects
      - codecov/upload:
          file: ./jar-common/build/reports/jacoco/test/jacocoTestReport.xml
      - codecov/upload:
          file: ./jar-auth/build/reports/jacoco/test/jacocoTestReport.xml
      - codecov/upload:
          file: ./jar-client/build/reports/jacoco/test/jacocoTestReport.xml
      - codecov/upload:
          file: ./jar-shell/build/reports/jacoco/test/jacocoTestReport.xml
      - codecov/upload:
          file: ./svc-data/build/reports/jacoco/test/jacocoTestReport.xml
      - codecov/upload:
          file: ./svc-position/build/reports/jacoco/test/jacocoTestReport.xml
      - codecov/upload:
          file: ./svc-event/build/reports/jacoco/test/jacocoTestReport.xml

      # Save build cache
      - save_cache:
          paths:
            - ~/.gradle
            - ~/.m2
          key: v3-build-cache-{{ checksum "build.gradle" }}-{{ checksum "gradle/libs.versions.toml" }}-{{ checksum "settings.gradle" }}

      # Store artifacts and persist workspace
      - store_artifacts:
          path: ~/project/jar-common/build/libs
      - store_artifacts:
          path: ~/project/jar-auth/build/libs
      - store_artifacts:
          path: ~/project/jar-client/build/libs
      - store_artifacts:
          path: ~/project/jar-shell/build/libs
      - store_artifacts:
          path: ~/project/svc-data/build/libs
      - store_artifacts:
          path: ~/project/svc-position/build/libs
      - store_artifacts:
          path: ~/project/svc-event/build/libs
      
      # Store test results
      - store_test_results:
          path: ~/project/jar-common/build/test-results/test
      - store_test_results:
          path: ~/project/jar-auth/build/test-results/test
      - store_test_results:
          path: ~/project/jar-client/build/test-results/test
      - store_test_results:
          path: ~/project/jar-shell/build/test-results/test
      - store_test_results:
          path: ~/project/svc-data/build/test-results/test
      - store_test_results:
          path: ~/project/svc-position/build/test-results/test
      - store_test_results:
          path: ~/project/svc-event/build/test-results/test
      
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./jar-common/build/reports/jacoco/test/*.xml
            - ./jar-auth/build/reports/jacoco/test/*.xml
            - ./jar-client/build/reports/jacoco/test/*.xml
            - ./jar-shell/build/reports/jacoco/test/*.xml
            - ./svc-data/build/reports/jacoco/test/*.xml
            - ./svc-position/build/reports/jacoco/test/*.xml
            - ./svc-event/build/reports/jacoco/test/*.xml
            - ./codecov.yml
            - ~/.m2/repository/org/beancounter

  # Docker packaging jobs (only for master branch)
  package-shell:
    executor: java-build
    environment:
      IMAGE_NAME: bc-shell
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7e:93:fb:39:b3:21:f7:b6:48:bd:f7:0e:56:5c:ad:87"
      - restore_cache:
          keys:
            - v3-build-cache-{{ checksum "build.gradle" }}-{{ checksum "gradle/libs.versions.toml" }}-{{ checksum "settings.gradle" }}
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run:
          name: Package BC-SHELL
          command: |
            docker buildx create --use
            docker buildx inspect
            docker run --rm --privileged tonistiigi/binfmt --install arm64
            echo "$GH_GCR" | docker login ghcr.io -u "$DOCKER_USER" --password-stdin
            docker buildx build --push \
                                --platform linux/arm64/v8,linux/amd64 \
                                -t "ghcr.io/monowai/bc-shell:latest" \
                                -t "ghcr.io/monowai/bc-shell:${STACK_VER}" \
                                 ~/project/jar-shell/.

  package-data:
    executor: java-build
    environment:
      IMAGE_NAME: bc-data
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7e:93:fb:39:b3:21:f7:b6:48:bd:f7:0e:56:5c:ad:87"
      - restore_cache:
          keys:
            - v3-build-cache-{{ checksum "build.gradle" }}-{{ checksum "gradle/libs.versions.toml" }}-{{ checksum "settings.gradle" }}
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run:
          name: Package BC-DATA
          command: |
            docker buildx create --use
            docker buildx inspect
            docker run --rm --privileged tonistiigi/binfmt --install arm64
            echo "$GH_GCR" | docker login ghcr.io -u "$DOCKER_USER" --password-stdin
            docker buildx build --push \
                                --platform linux/arm64/v8,linux/amd64 \
                                -t "ghcr.io/monowai/bc-data:latest" \
                                -t "ghcr.io/monowai/bc-data:${STACK_VER}" \
                                 ~/project/svc-data/.

  package-position:
    executor: java-build
    environment:
      IMAGE_NAME: bc-position
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7e:93:fb:39:b3:21:f7:b6:48:bd:f7:0e:56:5c:ad:87"
      - restore_cache:
          keys:
            - v3-build-cache-{{ checksum "build.gradle" }}-{{ checksum "gradle/libs.versions.toml" }}-{{ checksum "settings.gradle" }}
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run:
          name: Package BC-POSITION
          command: |
            docker buildx create --use
            docker buildx inspect
            docker run --rm --privileged tonistiigi/binfmt --install arm64
            echo "$GH_GCR" | docker login ghcr.io -u "$DOCKER_USER" --password-stdin
            docker buildx build --push \
                                --platform linux/arm64/v8,linux/amd64 \
                                -t "ghcr.io/monowai/bc-position:latest" \
                                -t "ghcr.io/monowai/bc-position:${STACK_VER}" \
                                 ~/project/svc-position/.

  package-event:
    executor: java-build
    environment:
      IMAGE_NAME: bc-event
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7e:93:fb:39:b3:21:f7:b6:48:bd:f7:0e:56:5c:ad:87"
      - restore_cache:
          keys:
            - v3-build-cache-{{ checksum "build.gradle" }}-{{ checksum "gradle/libs.versions.toml" }}-{{ checksum "settings.gradle" }}
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run:
          name: Package BC-EVENT
          command: |
            docker buildx create --use
            docker buildx inspect
            docker run --rm --privileged tonistiigi/binfmt --install arm64
            echo "$GH_GCR" | docker login ghcr.io -u "$DOCKER_USER" --password-stdin
            docker buildx build --push \
                                --platform linux/arm64/v8,linux/amd64 \
                                -t "ghcr.io/monowai/bc-event:latest" \
                                -t "ghcr.io/monowai/bc-event:${STACK_VER}" \
                                 ~/project/svc-event/.

  publish-coverage:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7e:93:fb:39:b3:21:f7:b6:48:bd:f7:0e:56:5c:ad:87"
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Codacy Coverage
          command: |
            cd ~/workspace
            bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Kotlin $(find -name 'jacoco*.xml' -printf '-r %p ')

workflows:
  version: 2
  build_and_stage:
    jobs:
      # Complete build and test (handles stub dependencies)
      - build-and-test
      
      # Docker packaging (only on master, parallel after build)
      - package-shell:
          filters:
            branches:
              only: master
          requires:
            - build-and-test
      - package-data:
          filters:
            branches:
              only: master
          requires:
            - build-and-test
      - package-position:
          filters:
            branches:
              only: master
          requires:
            - build-and-test
      - package-event:
          filters:
            branches:
              only: master
          requires:
            - build-and-test
      
      # Coverage publishing (only on master and codacy branches)
      - publish-coverage:
          filters:
            branches:
              only:
                - master
                - /^codacy.*/
          requires:
            - build-and-test
